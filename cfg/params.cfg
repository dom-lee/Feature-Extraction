#!/usr/bin/env python
PACKAGE = "feature_extraction"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Parameters for Base Plane Estimation
gen.add("ring_to_fit_base",   int_t,    0, "number of rings to estimate base plane",
5, 1, 32)
gen.add("smooth_window_size", int_t,    0, "window size for smoothness check",
20, 1, 30)
gen.add("smooth_threshold",   double_t, 0, "threshold for candidates of base",
0.95, 0.0, 1.0)

# Parameters for Plane RANSAC
gen.add("fit_plane_threshold",    double_t, 0, "threshold for RANSAC [m]",
0.01, 0.0, 1.0)

# Parameters for Ground Extraction
gen.add("grid_length",           double_t, 0, "size of each grid [m]",
1.0, 0.1, 5)
gen.add("grid_range",            int_t,    0, "number of grid at half side",
60, 10, 300)
gen.add("discontinuity_height",  double_t, 0, "discontinuity threshold in the cell [m]",
1.5, 0.0, 10.0)
gen.add("obstacle_threshold",    double_t, 0, "height threshold for obstacle [m]",
0.3, 0.01, 3.0)
gen.add("ground_threshold",      double_t, 0, "threshold of z diff for ground [m]",
0.2, 0.0, 1.0)
gen.add("grass_count_threshold", int_t,    0, "threshold of minimum count for grass",
20, 0, 100)
gen.add("grass_ratio_threshold", double_t, 0, "threshold of ratio of grass points",
0.4, 0.0, 1.0)

# Parameters for Road Modeling
gen.add("beam_section_number",    int_t,    0, "number of beam section for road modeling",
180, 90, 360)
gen.add("road_view_range",        double_t, 0, "max distance for analyze road model [m]",
40, 10, 100)
gen.add("road_width_threshold",   double_t, 0, "threshold of road width for road modeling[m]",
6, 1, 100)
gen.add("ground_count_threshold", int_t,    0, "threshold of ground number for road",
20, 1, 100)

# Parameters for Curb Extraction
gen.add("discontinuity_azimuth",  double_t, 0, "angular threshold for discontinuity [rad]",
0.025, 0.0, 1.0)
gen.add("discontinuity_distance", double_t, 0, "distance threshold for discontinuity [m]",
1.5, 0.0, 100.0)
gen.add("smoothness_threshold",   double_t, 0, "smoothness threshold for edge detection",
0.004, 0.0, 1.0)
gen.add("smooth_count",           int_t,    0, "number neighbors for checking smoothness",
5, 0, 100)
gen.add("continuity_angle",       double_t, 0, "angluar threshold for continuity",
2.7, 0.0, 3.14)
gen.add("curb_height_threshold",  double_t, 0, "height threshold for curb [m]",
0.05, 0.0, 1.0)
gen.add("curb_angle_threshold",   double_t, 0, "angluar threshold for curb [rad]",
2.3, 0.0, 3.14)
gen.add("sidewalk_length",        double_t, 0, "angluar threshold for curb [m]",
1.0, 0.0, 10.0)

gen.add("angular_resolution",     double_t, 0, "angular resolution of velodyne [rad]",
0.006, 0.0, 0.1)
gen.add("discontinuity_ratio",    double_t, 0, "threshold for discontinuity",
4.0, 0.0, 100.0)
gen.add("continuity_distance",    double_t, 0, "distance threshold for continuity",
0.5, 0.0, 10.0)
gen.add("smooth_dist_threshold",  double_t, 0, "distance of smooth points threshold",
0.5, 0.0, 10)


# Parameters for Debug
gen.add("ring_to_analyze",        int_t,    0, "number of rings to analyze",
32, 1, 32)

gen.add("distance_to_analyze",    double_t, 0, "distance to analyze",
60, 1, 200)
gen.add("grid_resolution",        int_t,    0, "number of grid in 1m",
2, 1, 10)
gen.add("not_obstacle_threshold", double_t, 0, "height threshold for ground [m]",
0.3, 0.01, 0.5)




gen.add("base_buffer",          double_t, 0, "Threshold for Base Candidates",
0.9, 0.0, 1.0)
gen.add("angle_buffer",         double_t, 0, "angle buffer for obstacle filter[rad]",
0.3, 0.0, 0.5)

gen.add("angle_diff_threshold",  double_t, 0, "threshold for multi planar models [rad]",
0.1, 0.0, 1.5)
gen.add("height_diff_threshold", double_t, 0, "threshold for multi planar models [m]",
1.0, 0.0, 2.0)
gen.add("ground_discontinuity",  double_t, 0, "discontinuity multiplication for ground",
30, 0, 100)
gen.add("continued_number",      int_t,    0, "minmum number of continued for ground",
10, 0, 100)

gen.add("curb_height",           double_t, 0, "height of curb [m]",
0.2, 0.1, 1.0)
gen.add("curb_window_size",      int_t,    0, "window size for curb extraction",
30, 1, 100)
gen.add("discontinuity",         double_t, 0, "discontinuity multiplication for ground",
3.0, 0.0, 1000.0)


exit(gen.generate(PACKAGE, "feature_extraction", "feature_extraction"))

